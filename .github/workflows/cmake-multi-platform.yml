# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on: [workflow_dispatch]
  push:
    branches: [ "cmake" ]
  pull_request:
    branches: [ "cmake" ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      # cc: "gcc" or c_compiler: gcc? cxx: "g++" or cpp_compiler: g++?
      matrix:
        config:
        - {
            name: "Ubuntu latest gcc, ROOT 6.30.06", artifact: "UbuntuROOT6.30.06.tar.xz",
            os: ubuntu-latest, root: "6.30.06",
            build_type: "Release", cc: "gcc", cxx: "g++"
          }
        - {
            name: "MacOS latest gcc, ROOT 6.30.06", artifact: "macOSROOT6.30.06.tar.xz",
            os: macos-latest, root: "6.30.06",
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Setup MacPorts
      if: ${{ "$RUNNER_OS" == "macOS" }}
      uses: melusina-org/setup-macports@v1.1.3
            
    - name: Install ROOT
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install binutils cmake dpkg-dev g++ gcc libssl-dev git libx11-dev libxext-dev libxft-dev libxpm-dev python3
          sudo apt-get install gfortran libpcre3-dev xlibmesa-glu-dev libglew-dev libftgl-dev libmysqlclient-dev libfftw3-dev libcfitsio-dev graphviz-dev libavahi-compat-libdnssd-dev libldap2-dev python3-dev python3-numpy libxml2-dev libkrb5-dev libgsl0-dev qtwebengine5-dev nlohmann-json3-dev
          wget https://root.cern/download/root_v${{matrix.config.root}}.source.tar.gz
          tar -xzf root_v${{matrix.config.root}}.source.tar.gz
          echo "Running cmake -S root-${{matrix.config.root}} -B root_v${{matrix.config.root}} -Dall=ON -Dcuda=OFF -Dclad=OFF"
          cmake -S root-${{matrix.config.root}} -B root_v${{matrix.config.root}} -Dall=ON -Dcuda=OFF -Dclad=OFF
          cmake --build root_v${{matrix.config.root}}
        elif [ "$RUNNER_OS" == "macOS"]; then
          sudo port install root6
        fi
      shell: bash
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
        -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.config.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.config.build_type }}
